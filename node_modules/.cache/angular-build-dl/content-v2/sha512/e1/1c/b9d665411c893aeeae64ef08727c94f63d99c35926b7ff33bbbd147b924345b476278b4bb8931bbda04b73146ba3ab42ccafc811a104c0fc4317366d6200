(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["collections-collections-module"],{

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/collections/collections.page.html":
/*!*****************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/collections/collections.page.html ***!
  \*****************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<ion-header [translucent]=\"true\">\n  <ion-toolbar color=\"primary\">\n    <ion-buttons slot=\"start\">\n      <ion-back-button defaultHref=\"home\"></ion-back-button>\n    </ion-buttons>\n    <ion-buttons slot=\"end\">\n      <ion-menu-button></ion-menu-button>\n    </ion-buttons>\n    <ion-title>\n      Mis colecciones\n    </ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content [fullscreen]=\"true\">\n\n  <ion-list>\n    <ion-item detail button (click)='goToWishlist()'>\n      <ion-icon name=\"heart-outline\"></ion-icon>\n      <div style=\"margin-left: 5px;\">Lista de deseos</div>\n    </ion-item>\n    <ion-item-sliding *ngFor=\"let col of colecciones\">\n      <ion-item-options side=\"start\">\n        <ion-item-option color=\"danger\" (click)=\"deleteCollection(col.CollectionID)\">\n          <ion-icon name=\"trash\"></ion-icon>\n        </ion-item-option>\n      </ion-item-options>\n      <ion-item detail button (click)='goToCollection(col.CollectionID)'>\n        <ion-icon name=\"albums\"></ion-icon> \n        <div style=\"margin-left: 5px;\" class=\"ion-text-wrap\">{{ col.CollectionName }}</div>\n      </ion-item>\n    </ion-item-sliding>\n  </ion-list>\n\n  <ion-fab horizontal=\"end\" vertical=\"bottom\" slot=\"fixed\">\n    <ion-fab-button color=\"primary\">\n      <ion-icon name=\"add\" (click)=\"goToNewCollection()\"></ion-icon>\n    </ion-fab-button>\n  </ion-fab>\n</ion-content>\n");

/***/ }),

/***/ "./src/app/api-rest.service.ts":
/*!*************************************!*\
  !*** ./src/app/api-rest.service.ts ***!
  \*************************************/
/*! exports provided: ApiRestService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApiRestService", function() { return ApiRestService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/__ivy_ngcc__/fesm2015/core.js");
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ionic/angular */ "./node_modules/@ionic/angular/__ivy_ngcc__/fesm2015/ionic-angular.js");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/__ivy_ngcc__/fesm2015/http.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");





const httpOptions = {
    headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_3__["HttpHeaders"]({ 'Content-Type': 'application/json' })
};
let ApiRestService = class ApiRestService {
    constructor(httpClient, navCtrl, toast) {
        this.httpClient = httpClient;
        this.navCtrl = navCtrl;
        this.toast = toast;
        /*path:string = "http://localhost:8081/api";*/
        /*path:string = "http://www.mercury-retrograde.net/tfm/api";*/
        this.path = "http://91.117.92.244:8081/api";
        this.ItemTypeIcon = {
            1: "book",
            2: "musical-notes",
            3: "film",
            4: "game-controller",
            5: "chatbubbles"
        };
        this.ItemTypeURL = {
            1: "book",
            2: "music",
            3: "video",
            4: "game",
            5: "comic"
        };
        this.ItemTypeNameEs = {
            "book": "Libro",
            "music": "Álbum",
            "video": "Vídeo",
            "game": "Videojuego",
            "comic": "Cómic"
        };
        this.setUserID();
    }
    setUserID() {
        /*this.UserID = parseInt(localStorage.getItem('UserID'));*/
        this.UserID = 1;
    }
    handleError(operation = 'operation', result) {
        return (error) => {
            console.error(error); // log to console instead
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_4__["of"])(result);
        };
    }
    getUserID() {
        return this.UserID;
    }
    getUserNickname() {
        this.httpClient.get(this.path + "/user/read.php?UserID=" + this.UserID)
            .subscribe(data => {
            localStorage.setItem('Nickname', JSON.stringify(data['Nickname']));
        }, error => {
            console.log(error);
        });
    }
    presentToast(msg) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
            const toast = yield this.toast.create({
                message: msg,
                duration: 2000
            });
            toast.present();
        });
    }
    getItemTypeIcon(type) {
        return this.ItemTypeIcon[type];
    }
    getItemTypeURL(type) {
        var y = +type;
        return this.ItemTypeURL[y];
    }
    getItemTypeName(type) {
        return this.ItemTypeNameEs[type];
    }
    getItemType(typeURL) {
        return Object.keys(this.ItemTypeURL).find(key => this.ItemTypeURL[key] === typeURL);
    }
    login(email, uid) {
        console.log("Estoy en API login");
        var u = {
            'Email': email,
            'FirebaseID': uid
        };
        this.httpClient.post(this.path + "/user/login.php", u, { observe: 'response' })
            .subscribe(data => {
            console.log("data body: ", data['body']['UserID']);
            localStorage.setItem('UserID', data['body']['UserID']);
            this.setUserID();
            this.getUserNickname();
        }, error => {
            console.log(error);
        });
    }
    getCollections() {
        return this.httpClient.get(this.path + "/collection/read.php?user=" + this.UserID);
    }
    getCollection(CollectionID) {
        return this.httpClient.get(this.path + "/collection/single-read.php?CollectionID=" + CollectionID);
    }
    getWishlist() {
        return this.httpClient.get(this.path + "/edition/read-wishlist.php?user=" + this.UserID);
    }
    getRandomCollections() {
        return this.httpClient.get(this.path + "/collection/read-random.php?user=" + this.UserID);
    }
    getEditions() {
        return this.httpClient.get(this.path + "/edition/read-summed.php?user=" + this.UserID);
    }
    getEditionsPaginated(page, num) {
        return this.httpClient.get(this.path + "/edition/read-summed.php?user=" + this.UserID
            + "&page=" + page + "&num=" + num);
    }
    getEditionsInCollection(CollectionID) {
        return this.httpClient.get(this.path + "/edition/read-collection.php?collection=" + CollectionID);
    }
    getItemsInSeries(SeriesID) {
        return this.httpClient.get(this.path + "/item/read-series.php?series=" + SeriesID);
    }
    getItemsByPerson(PersonID) {
        return this.httpClient.get(this.path + "/item/read-person.php?person=" + PersonID);
    }
    getItemsByGenre(GenreID) {
        return this.httpClient.get(this.path + "/item/read-genre.php?genre=" + GenreID);
    }
    getItem(ItemID) {
        return this.httpClient.get(this.path + '/item/single-read.php?ItemID=' + ItemID);
    }
    getBooks() {
        return this.httpClient.get(this.path + "/book/read-summed.php?user=" + this.UserID);
    }
    getMusic() {
        return this.httpClient.get(this.path + "/music/read-summed.php?user=" + this.UserID);
    }
    getVideos() {
        return this.httpClient.get(this.path + "/video/read-summed.php?user=" + this.UserID);
    }
    getGames() {
        return this.httpClient.get(this.path + "/game/read-summed.php?user=" + this.UserID);
    }
    getComics() {
        return this.httpClient.get(this.path + "/comic/read-summed.php?user=" + this.UserID);
    }
    getItems(ItemType) {
        return this.httpClient.get(this.path + "/item/read-summed.php?type=" + ItemType);
    }
    getEditionsOfItem(ItemID, ItemType) {
        return this.httpClient.get(this.path + "/" + ItemType + "/read.php?item=" + ItemID);
    }
    getEdition(EditionID, ItemType) {
        return this.httpClient.get(this.path + "/" + ItemType + "/single-read.php?EditionID=" + EditionID);
    }
    getEditionOwned(EditionID) {
        return this.httpClient.get(this.path + "/edition/read-owned.php?user=" + this.UserID
            + "&edition=" + EditionID);
    }
    isEditionOwned(EditionID) {
        var e = this.getEditionOwned(EditionID);
        return e['ItemCount'] > 0;
    }
    getSeries(SeriesID) {
        return this.httpClient.get(this.path + "/series/single-read.php?SeriesID=" + SeriesID);
    }
    getSeriesList() {
        return this.httpClient.get(this.path + "/series/read.php");
    }
    getPerson(PersonID) {
        return this.httpClient.get(this.path + "/person/single-read.php?PersonID=" + PersonID);
    }
    getPersonList() {
        return this.httpClient.get(this.path + "/person/read.php");
    }
    getGenre(GenreID) {
        return this.httpClient.get(this.path + "/genre/single-read.php?GenreID=" + GenreID);
    }
    getAllGenreList() {
        return this.httpClient.get(this.path + "/genre/read.php");
    }
    getGenreList(type) {
        return this.httpClient.get(this.path + "/genre/read.php?type=" + type);
    }
    getWebsite(id) {
        return this.httpClient.get(this.path + "/website/single-read.php?WebsiteID=" + id);
    }
    getWebsitesForObject(id, type) {
        return this.httpClient.get(this.path + "/website/read.php?id=" + id + "&type=" + type);
    }
    // creates
    createItem(item) {
        item.CreatorUserID = this.UserID;
        console.log("createItem: ", item);
        var headers = new Headers();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        this.httpClient.post(this.path + "/item/create.php", item, { observe: 'response' })
            .subscribe(data => {
            console.log("data body: ", data['body']['ItemID']);
            /*this.navCtrl.navigateForward("/create-item-next/"+
            this.getItemTypeURL(item.ItemType)+"/"+data['body']['ItemID']);*/
            this.navCtrl.navigateForward("/item/" +
                this.getItemTypeURL(item.ItemType) + "/" + data['body']['ItemID']);
        }, error => {
            console.log(error);
        });
        /*return this.httpClient.post<any>(this.path, item, httpOptions).pipe(
          tap((prod: any) => console.log(`Added item ID=${prod.ItemID}`)),
          catchError(this.handleError<any>('/create-item'))
        );*/
    }
    /*createSeries(series: any): Observable<any> {
      return this.httpClient.post<any>(this.path + "/series/create.php", series, httpOptions).pipe(
        tap((prod: any) => console.log(`Added Series ID=${prod}`)),
        catchError(this.handleError<any>('/create-series'))
      );
    }*/
    createEdition(type, item, edition) {
        edition.CreatorUserID = this.UserID;
        edition.ItemID = item;
        edition.ItemType = type;
        console.log("createEdition: ", edition);
        var headers = new Headers();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        return this.httpClient.post(this.path + "/" + this.getItemTypeURL(type) + "/create.php", edition, { observe: 'response' });
    }
    createSeries(series) {
        var headers = new Headers();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        series.CreatorUserID = this.UserID;
        console.log("createItem: ", series);
        return this.httpClient.post(this.path + "/series/create.php", series, { observe: 'response' });
    }
    createCollection(col) {
        var headers = new Headers();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        col.UserID = this.UserID;
        console.log("createItem: ", col);
        return this.httpClient.post(this.path + "/collection/create.php", col, { observe: 'response' });
    }
    createPerson(p) {
        var headers = new Headers();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        p.CreatorUserID = this.UserID;
        console.log("createPerson: ", p);
        if (p.Names != null) {
            this.httpClient.post(this.path + "/person/create.php", p, { observe: 'response' })
                .subscribe(data => {
                console.log("data body: ", data['body']['PersonID']);
                return (data['body']['PersonID']);
            }, error => {
                console.log(error);
            });
        }
    }
    createPersonWithItem(p, item) {
        console.log("createPerson: ", p['Names'], " ", p['LastNames']);
        var person = {
            'Names': p['Names'],
            'LastNames': p['LastNames'],
            'CreatorUserID': this.UserID
        };
        var headers = new Headers();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        this.httpClient.post(this.path + "/person/create.php", person, { observe: 'response' })
            .subscribe(data => {
            console.log("data body: ", data['body']['PersonID']);
            p['PersonID'] = data['body']['PersonID'];
            this.addPersonToItem(p, item);
        }, error => {
            console.log(error);
        });
    }
    createWebsite(web, id, type) {
        var headers = new Headers();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        web.EntityID = id;
        web.EntityType = type;
        web.CreatorUserID = this.getUserID();
        console.log("createWebsite: ", web);
        return this.httpClient.post(this.path + "/website/create.php", web, { observe: 'response' });
    }
    addPersonToItem(p, item) {
        console.log("addPerson: ", p['PersonID'], " ", item, " ", p['Role']);
        var person = {
            'PersonID': p['PersonID'],
            'ItemID': item,
            'Role': p['Role']
        };
        var headers = new Headers();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        return this.httpClient.post(this.path + "/person/add-to-item.php", person, { observe: 'response' });
    }
    addEditionToUser(id, type, owned) {
        if (this.isEditionOwned(id)) {
            console.log("El usuario ya tiene la edición ", id);
            return 1;
        }
        var e = {
            'UserID': this.UserID,
            'EditionID': id,
            'IsOwned': owned
        };
        console.log("e: ", e);
        var headers = new Headers();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        this.httpClient.post(this.path + "/edition/add-to-user.php", e, { observe: 'response' })
            .subscribe(data => {
            console.log("Added ", e['EditionID'], " to user");
            return data;
        }, error => {
            console.log(error);
            return error;
        });
    }
    addEditionToCollection(id, edition) {
        edition["CollectionID"] = id;
        console.log("add edition ", edition);
        var headers = new Headers();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        this.httpClient.post(this.path + "/edition/add-to-collection.php", edition, { observe: 'response' })
            .subscribe(data => {
            console.log("Added ", edition['EditionID'], " to collection ", edition['CollectionID']);
            return data;
        }, error => {
            console.log(error);
            return error;
        });
    }
    updateCollection(col, id) {
        col.UserID = this.UserID;
        col.CollectionID = id;
        console.log("col: ", col);
        var headers = new Headers();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        return this.httpClient.post(this.path + "/collection/update.php", col, { observe: 'response' });
    }
    updateItem(item, id) {
        item.CreatorUserID = this.UserID;
        item.ItemID = id;
        console.log("item: ", item);
        var headers = new Headers();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        this.httpClient.post(this.path + "/item/update.php", item, { observe: 'response' })
            .subscribe(data => {
            console.log("Updated ", item['ItemID']);
            return data;
        }, error => {
            console.log(error);
            return error;
        });
    }
    updateEdition(ed, id, type) {
        ed.EditionID = id;
        console.log("edition: ", ed);
        var headers = new Headers();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        this.httpClient.post(this.path + "/" + type + "/update.php", ed, { observe: 'response' })
            .subscribe(data => {
            console.log("Updated ", ed['EditionID']);
            return data;
        }, error => {
            console.log(error);
            return error;
        });
    }
    updateSeries(series, id) {
        /*series.SeriesID = id;*/
        console.log("series: ", series);
        var headers = new Headers();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        this.httpClient.post(this.path + "/series/update.php", series, { observe: 'response' })
            .subscribe(data => {
            console.log("Updated ", series['SeriesID']);
            return data;
        }, error => {
            console.log(error);
            return error;
        });
    }
    updatePerson(person, id) {
        console.log("person: ", person);
        var headers = new Headers();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        this.httpClient.post(this.path + "/person/update.php", person, { observe: 'response' })
            .subscribe(data => {
            console.log("Updated ", person['PersonID']);
            return data;
        }, error => {
            console.log(error);
            return error;
        });
    }
    updateWebsite(web) {
        console.log("website: ", web);
        var headers = new Headers();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        return this.httpClient.post(this.path + "/website/update.php", web, { observe: 'response' });
    }
    updateUser(uid, email, name) {
        var person = {
            'UserID': this.UserID,
            'Nickname': name,
            'FirebaseID': uid,
            'Email': email
        };
        console.log("user: ", person);
        var headers = new Headers();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        this.httpClient.post(this.path + "/user/update.php", person, { observe: 'response' })
            .subscribe(data => {
            console.log("Updated ", person['UserID']);
            this.presentToast("Actualizado el apodo");
            localStorage.setItem('Nickname', JSON.stringify(name));
            return data;
        }, error => {
            console.log(error);
            return error;
        });
    }
    deleteCollection(id) {
        var c = {
            'CollectionID': id
        };
        var headers = new Headers();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        return this.httpClient.post(this.path + "/collection/delete.php", c, { observe: 'response' });
    }
    deleteEdition(id, type) {
        var c = {
            'EditionID': id
        };
        var headers = new Headers();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        return this.httpClient.post(this.path + "/" + type + "/delete.php", c, { observe: 'response' });
    }
    deleteItem(id, type) {
        var c = {
            'ItemID': id,
            "ItemTypeName": type
        };
        var headers = new Headers();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        this.httpClient.post(this.path + "/item/delete.php", c, { observe: 'response' })
            .subscribe(data => {
            console.log(data);
            if (data['body']['otros'] != 0) {
                this.presentToast(data['body']['message']);
            }
            else {
                this.navCtrl.navigateForward("/myitems");
            }
        }, error => {
            console.log(error);
            return error;
        });
    }
    deleteSeries(id) {
        var c = {
            'SeriesID': id
        };
        var headers = new Headers();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        this.httpClient.post(this.path + "/series/delete.php", c, { observe: 'response' })
            .subscribe(data => {
            console.log(data);
            console.log("Deleted ", c['SeriesID']);
            return data;
        }, error => {
            console.log(error);
            return error;
        });
    }
    deletePerson(id) {
        var c = {
            'PersonID': id
        };
        var headers = new Headers();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        this.httpClient.post(this.path + "/person/delete.php", c, { observe: 'response' })
            .subscribe(data => {
            console.log(data);
            console.log("Deleted ", c['PersonID']);
            return data;
        }, error => {
            console.log(error);
            return error;
        });
    }
    deleteWebsite(id) {
        var c = {
            'WebsiteID': id
        };
        var headers = new Headers();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        this.httpClient.post(this.path + "/website/delete.php", c, { observe: 'response' })
            .subscribe(data => {
            console.log(data);
            console.log("Deleted ", c['WebsiteID']);
            return data;
        }, error => {
            console.log(error);
            return error;
        });
    }
    removeEditionFromCollection(CollectionID, ItemID, EditionID) {
        var c = {
            'CollectionID': CollectionID,
            'ItemID': ItemID,
            'EditionID': EditionID
        };
        var headers = new Headers();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        return this.httpClient.post(this.path + "/edition/remove-from-collection.php", c, { observe: 'response' });
    }
    removePersonToItem(person, item, role) {
        var p = {
            'PersonID': person,
            'ItemID': item,
            'Role': role
        };
        console.log("p: ", p);
        var headers = new Headers();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        return this.httpClient.post(this.path + "/person/remove-from-item.php", p, { observe: 'response' });
    }
    removeEditionFromUser(editionID) {
        var c = {
            'UserID': this.getUserID(),
            'EditionID': editionID
        };
        var headers = new Headers();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        return this.httpClient.post(this.path + "/edition/remove-from-user.php", c, { observe: 'response' });
    }
    updateEditionToUser(edition, owned) {
        var c = {
            'UserID': this.getUserID(),
            'EditionID': edition,
            'IsOwned': owned
        };
        var headers = new Headers();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        return this.httpClient.post(this.path + "/edition/update-to-user.php", c, { observe: 'response' });
    }
    searchEditions(params) {
        var headers = new Headers();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        return this.httpClient.post(this.path + "/edition/search.php", params, { observe: 'response' });
    }
};
ApiRestService.ctorParameters = () => [
    { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_3__["HttpClient"] },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_2__["NavController"] },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_2__["ToastController"] }
];
ApiRestService = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
        providedIn: 'root'
    })
], ApiRestService);



/***/ }),

/***/ "./src/app/collections/collections-routing.module.ts":
/*!***********************************************************!*\
  !*** ./src/app/collections/collections-routing.module.ts ***!
  \***********************************************************/
/*! exports provided: CollectionsPageRoutingModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CollectionsPageRoutingModule", function() { return CollectionsPageRoutingModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/__ivy_ngcc__/fesm2015/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/__ivy_ngcc__/fesm2015/router.js");
/* harmony import */ var _collections_page__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./collections.page */ "./src/app/collections/collections.page.ts");




const routes = [
    {
        path: '',
        component: _collections_page__WEBPACK_IMPORTED_MODULE_3__["CollectionsPage"]
    }
];
let CollectionsPageRoutingModule = class CollectionsPageRoutingModule {
};
CollectionsPageRoutingModule = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        imports: [_angular_router__WEBPACK_IMPORTED_MODULE_2__["RouterModule"].forChild(routes)],
        exports: [_angular_router__WEBPACK_IMPORTED_MODULE_2__["RouterModule"]],
    })
], CollectionsPageRoutingModule);



/***/ }),

/***/ "./src/app/collections/collections.module.ts":
/*!***************************************************!*\
  !*** ./src/app/collections/collections.module.ts ***!
  \***************************************************/
/*! exports provided: CollectionsPageModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CollectionsPageModule", function() { return CollectionsPageModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/__ivy_ngcc__/fesm2015/core.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/__ivy_ngcc__/fesm2015/common.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/__ivy_ngcc__/fesm2015/forms.js");
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ionic/angular */ "./node_modules/@ionic/angular/__ivy_ngcc__/fesm2015/ionic-angular.js");
/* harmony import */ var _collections_routing_module__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./collections-routing.module */ "./src/app/collections/collections-routing.module.ts");
/* harmony import */ var _collections_page__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./collections.page */ "./src/app/collections/collections.page.ts");







/*import { CreateCollectionPageModule } from '../create-collection/create-collection.module';
import { ComponentsModule } from '../components/components.module';*/
let CollectionsPageModule = class CollectionsPageModule {
};
CollectionsPageModule = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        imports: [
            _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormsModule"],
            _ionic_angular__WEBPACK_IMPORTED_MODULE_4__["IonicModule"],
            //ComponentsModule,
            _collections_routing_module__WEBPACK_IMPORTED_MODULE_5__["CollectionsPageRoutingModule"],
        ],
        declarations: [_collections_page__WEBPACK_IMPORTED_MODULE_6__["CollectionsPage"]]
    })
], CollectionsPageModule);



/***/ }),

/***/ "./src/app/collections/collections.page.scss":
/*!***************************************************!*\
  !*** ./src/app/collections/collections.page.scss ***!
  \***************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbGxlY3Rpb25zL2NvbGxlY3Rpb25zLnBhZ2Uuc2NzcyJ9 */");

/***/ }),

/***/ "./src/app/collections/collections.page.ts":
/*!*************************************************!*\
  !*** ./src/app/collections/collections.page.ts ***!
  \*************************************************/
/*! exports provided: CollectionsPage */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CollectionsPage", function() { return CollectionsPage; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/__ivy_ngcc__/fesm2015/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/__ivy_ngcc__/fesm2015/router.js");
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ionic/angular */ "./node_modules/@ionic/angular/__ivy_ngcc__/fesm2015/ionic-angular.js");
/* harmony import */ var _api_rest_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../api-rest.service */ "./src/app/api-rest.service.ts");





//import { CreateCollectionPage } from '../create-collection/create-collection.page';
let CollectionsPage = class CollectionsPage {
    constructor(http, navCtrl, modalController, route, router, alertController) {
        this.http = http;
        this.navCtrl = navCtrl;
        this.modalController = modalController;
        this.route = route;
        this.router = router;
        this.alertController = alertController;
        this.getCollections();
    }
    getCollections() {
        this.colecciones = [];
        this.http.getCollections().subscribe((res) => {
            this.colecciones = res['body'];
            console.log("colecciones: ", this.colecciones);
        }, (error) => {
            console.error(error);
        });
        console.log(this.colecciones);
    }
    goToCollection(id) {
        console.log('id ', id);
        this.navCtrl.navigateForward("/collection/" + id);
    }
    goToWishlist() {
        this.navCtrl.navigateForward("/wishlist");
    }
    ngOnInit() {
    }
    goToNewCollection() {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
            console.log("Página modal");
            /*const modal = await this.modalController.create({
              component: CreateCollectionPage
            });
        
            modal.onDidDismiss().then((dataReturned) => {
              if (dataReturned != null) {
                this.colecciones = [];
                this.newCol = dataReturned;
                console.log("New Collection: ",this.newCol);
                this.getCollections();
              }
            });
        
            return await modal.present();*/
        });
    }
    deleteCollection(id) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
            const alert = yield this.alertController.create({
                header: 'Confirmar',
                message: '¿Estás seguro que deseas eliminar la colección?',
                buttons: [
                    {
                        text: 'Cancelar',
                        role: 'cancelar',
                        cssClass: 'secondary',
                        handler: () => {
                            console.log('Confirm Cancel');
                        }
                    }, {
                        text: 'Aceptar',
                        handler: () => {
                            console.log('Confirm Okay');
                            this.http.deleteCollection(id).subscribe(data => {
                                this.http.presentToast(data['body']['Message']);
                                if (data.status == 200) {
                                    this.getCollections();
                                }
                            }, error => {
                                console.log(error);
                                return error;
                            });
                        }
                    }
                ]
            });
            yield alert.present();
        });
    }
};
CollectionsPage.ctorParameters = () => [
    { type: _api_rest_service__WEBPACK_IMPORTED_MODULE_4__["ApiRestService"] },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_3__["NavController"] },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_3__["ModalController"] },
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"] },
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"] },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_3__["AlertController"] }
];
CollectionsPage = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-collections',
        template: Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"])(__webpack_require__(/*! raw-loader!./collections.page.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/collections/collections.page.html")).default,
        providers: [_api_rest_service__WEBPACK_IMPORTED_MODULE_4__["ApiRestService"]],
        styles: [Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"])(__webpack_require__(/*! ./collections.page.scss */ "./src/app/collections/collections.page.scss")).default]
    })
], CollectionsPage);



/***/ })

}]);
//# sourceMappingURL=collections-collections-module-es2015.js.map
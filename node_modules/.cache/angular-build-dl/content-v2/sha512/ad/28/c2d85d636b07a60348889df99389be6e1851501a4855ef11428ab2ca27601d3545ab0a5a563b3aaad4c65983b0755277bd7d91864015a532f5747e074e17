(function () {
  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  (window["webpackJsonp"] = window["webpackJsonp"] || []).push([["collections-collections-module"], {
    /***/
    "./node_modules/raw-loader/dist/cjs.js!./src/app/collections/collections.page.html":
    /*!*****************************************************************************************!*\
      !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/collections/collections.page.html ***!
      \*****************************************************************************************/

    /*! exports provided: default */

    /***/
    function node_modulesRawLoaderDistCjsJsSrcAppCollectionsCollectionsPageHtml(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony default export */


      __webpack_exports__["default"] = "<ion-header [translucent]=\"true\">\n  <ion-toolbar color=\"primary\">\n    <ion-buttons slot=\"start\">\n      <ion-back-button defaultHref=\"home\"></ion-back-button>\n    </ion-buttons>\n    <ion-buttons slot=\"end\">\n      <ion-menu-button></ion-menu-button>\n    </ion-buttons>\n    <ion-title>\n      Mis colecciones\n    </ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content [fullscreen]=\"true\">\n\n  <ion-list>\n    <ion-item detail button (click)='goToWishlist()'>\n      <ion-icon name=\"heart-outline\"></ion-icon>\n      <div style=\"margin-left: 5px;\">Lista de deseos</div>\n    </ion-item>\n    <ion-item-sliding *ngFor=\"let col of colecciones\">\n      <ion-item-options side=\"start\">\n        <ion-item-option color=\"danger\" (click)=\"deleteCollection(col.CollectionID)\">\n          <ion-icon name=\"trash\"></ion-icon>\n        </ion-item-option>\n      </ion-item-options>\n      <ion-item detail button (click)='goToCollection(col.CollectionID)'>\n        <ion-icon name=\"albums\"></ion-icon> \n        <div style=\"margin-left: 5px;\" class=\"ion-text-wrap\">{{ col.CollectionName }}</div>\n      </ion-item>\n    </ion-item-sliding>\n  </ion-list>\n\n  <ion-fab horizontal=\"end\" vertical=\"bottom\" slot=\"fixed\">\n    <ion-fab-button color=\"primary\">\n      <ion-icon name=\"add\" (click)=\"goToNewCollection()\"></ion-icon>\n    </ion-fab-button>\n  </ion-fab>\n</ion-content>\n";
      /***/
    },

    /***/
    "./src/app/api-rest.service.ts":
    /*!*************************************!*\
      !*** ./src/app/api-rest.service.ts ***!
      \*************************************/

    /*! exports provided: ApiRestService */

    /***/
    function srcAppApiRestServiceTs(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ApiRestService", function () {
        return ApiRestService;
      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! tslib */
      "./node_modules/tslib/tslib.es6.js");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/core */
      "./node_modules/@angular/core/__ivy_ngcc__/fesm2015/core.js");
      /* harmony import */


      var _ionic_angular__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @ionic/angular */
      "./node_modules/@ionic/angular/__ivy_ngcc__/fesm2015/ionic-angular.js");
      /* harmony import */


      var _angular_common_http__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/common/http */
      "./node_modules/@angular/common/__ivy_ngcc__/fesm2015/http.js");
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! rxjs */
      "./node_modules/rxjs/_esm2015/index.js");

      var httpOptions = {
        headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_3__["HttpHeaders"]({
          'Content-Type': 'application/json'
        })
      };

      var ApiRestService = /*#__PURE__*/function () {
        function ApiRestService(httpClient, navCtrl, toast) {
          _classCallCheck(this, ApiRestService);

          this.httpClient = httpClient;
          this.navCtrl = navCtrl;
          this.toast = toast;
          /*path:string = "http://localhost:8081/api";*/

          /*path:string = "http://www.mercury-retrograde.net/tfm/api";*/

          this.path = "http://91.117.92.244:8081/api";
          this.ItemTypeIcon = {
            1: "book",
            2: "musical-notes",
            3: "film",
            4: "game-controller",
            5: "chatbubbles"
          };
          this.ItemTypeURL = {
            1: "book",
            2: "music",
            3: "video",
            4: "game",
            5: "comic"
          };
          this.ItemTypeNameEs = {
            "book": "Libro",
            "music": "Álbum",
            "video": "Vídeo",
            "game": "Videojuego",
            "comic": "Cómic"
          };
          this.setUserID();
        }

        _createClass(ApiRestService, [{
          key: "setUserID",
          value: function setUserID() {
            /*this.UserID = parseInt(localStorage.getItem('UserID'));*/
            this.UserID = 1;
          }
        }, {
          key: "handleError",
          value: function handleError() {
            var operation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'operation';
            var result = arguments.length > 1 ? arguments[1] : undefined;
            return function (error) {
              console.error(error); // log to console instead

              return Object(rxjs__WEBPACK_IMPORTED_MODULE_4__["of"])(result);
            };
          }
        }, {
          key: "getUserID",
          value: function getUserID() {
            return this.UserID;
          }
        }, {
          key: "getUserNickname",
          value: function getUserNickname() {
            this.httpClient.get(this.path + "/user/read.php?UserID=" + this.UserID).subscribe(function (data) {
              localStorage.setItem('Nickname', JSON.stringify(data['Nickname']));
            }, function (error) {
              console.log(error);
            });
          }
        }, {
          key: "presentToast",
          value: function presentToast(msg) {
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
              var toast;
              return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      _context.next = 2;
                      return this.toast.create({
                        message: msg,
                        duration: 2000
                      });

                    case 2:
                      toast = _context.sent;
                      toast.present();

                    case 4:
                    case "end":
                      return _context.stop();
                  }
                }
              }, _callee, this);
            }));
          }
        }, {
          key: "getItemTypeIcon",
          value: function getItemTypeIcon(type) {
            return this.ItemTypeIcon[type];
          }
        }, {
          key: "getItemTypeURL",
          value: function getItemTypeURL(type) {
            var y = +type;
            return this.ItemTypeURL[y];
          }
        }, {
          key: "getItemTypeName",
          value: function getItemTypeName(type) {
            return this.ItemTypeNameEs[type];
          }
        }, {
          key: "getItemType",
          value: function getItemType(typeURL) {
            var _this = this;

            return Object.keys(this.ItemTypeURL).find(function (key) {
              return _this.ItemTypeURL[key] === typeURL;
            });
          }
        }, {
          key: "login",
          value: function login(email, uid) {
            var _this2 = this;

            console.log("Estoy en API login");
            var u = {
              'Email': email,
              'FirebaseID': uid
            };
            this.httpClient.post(this.path + "/user/login.php", u, {
              observe: 'response'
            }).subscribe(function (data) {
              console.log("data body: ", data['body']['UserID']);
              localStorage.setItem('UserID', data['body']['UserID']);

              _this2.setUserID();

              _this2.getUserNickname();
            }, function (error) {
              console.log(error);
            });
          }
        }, {
          key: "getCollections",
          value: function getCollections() {
            return this.httpClient.get(this.path + "/collection/read.php?user=" + this.UserID);
          }
        }, {
          key: "getCollection",
          value: function getCollection(CollectionID) {
            return this.httpClient.get(this.path + "/collection/single-read.php?CollectionID=" + CollectionID);
          }
        }, {
          key: "getWishlist",
          value: function getWishlist() {
            return this.httpClient.get(this.path + "/edition/read-wishlist.php?user=" + this.UserID);
          }
        }, {
          key: "getRandomCollections",
          value: function getRandomCollections() {
            return this.httpClient.get(this.path + "/collection/read-random.php?user=" + this.UserID);
          }
        }, {
          key: "getEditions",
          value: function getEditions() {
            return this.httpClient.get(this.path + "/edition/read-summed.php?user=" + this.UserID);
          }
        }, {
          key: "getEditionsPaginated",
          value: function getEditionsPaginated(page, num) {
            return this.httpClient.get(this.path + "/edition/read-summed.php?user=" + this.UserID + "&page=" + page + "&num=" + num);
          }
        }, {
          key: "getEditionsInCollection",
          value: function getEditionsInCollection(CollectionID) {
            return this.httpClient.get(this.path + "/edition/read-collection.php?collection=" + CollectionID);
          }
        }, {
          key: "getItemsInSeries",
          value: function getItemsInSeries(SeriesID) {
            return this.httpClient.get(this.path + "/item/read-series.php?series=" + SeriesID);
          }
        }, {
          key: "getItemsByPerson",
          value: function getItemsByPerson(PersonID) {
            return this.httpClient.get(this.path + "/item/read-person.php?person=" + PersonID);
          }
        }, {
          key: "getItemsByGenre",
          value: function getItemsByGenre(GenreID) {
            return this.httpClient.get(this.path + "/item/read-genre.php?genre=" + GenreID);
          }
        }, {
          key: "getItem",
          value: function getItem(ItemID) {
            return this.httpClient.get(this.path + '/item/single-read.php?ItemID=' + ItemID);
          }
        }, {
          key: "getBooks",
          value: function getBooks() {
            return this.httpClient.get(this.path + "/book/read-summed.php?user=" + this.UserID);
          }
        }, {
          key: "getMusic",
          value: function getMusic() {
            return this.httpClient.get(this.path + "/music/read-summed.php?user=" + this.UserID);
          }
        }, {
          key: "getVideos",
          value: function getVideos() {
            return this.httpClient.get(this.path + "/video/read-summed.php?user=" + this.UserID);
          }
        }, {
          key: "getGames",
          value: function getGames() {
            return this.httpClient.get(this.path + "/game/read-summed.php?user=" + this.UserID);
          }
        }, {
          key: "getComics",
          value: function getComics() {
            return this.httpClient.get(this.path + "/comic/read-summed.php?user=" + this.UserID);
          }
        }, {
          key: "getItems",
          value: function getItems(ItemType) {
            return this.httpClient.get(this.path + "/item/read-summed.php?type=" + ItemType);
          }
        }, {
          key: "getEditionsOfItem",
          value: function getEditionsOfItem(ItemID, ItemType) {
            return this.httpClient.get(this.path + "/" + ItemType + "/read.php?item=" + ItemID);
          }
        }, {
          key: "getEdition",
          value: function getEdition(EditionID, ItemType) {
            return this.httpClient.get(this.path + "/" + ItemType + "/single-read.php?EditionID=" + EditionID);
          }
        }, {
          key: "getEditionOwned",
          value: function getEditionOwned(EditionID) {
            return this.httpClient.get(this.path + "/edition/read-owned.php?user=" + this.UserID + "&edition=" + EditionID);
          }
        }, {
          key: "isEditionOwned",
          value: function isEditionOwned(EditionID) {
            var e = this.getEditionOwned(EditionID);
            return e['ItemCount'] > 0;
          }
        }, {
          key: "getSeries",
          value: function getSeries(SeriesID) {
            return this.httpClient.get(this.path + "/series/single-read.php?SeriesID=" + SeriesID);
          }
        }, {
          key: "getSeriesList",
          value: function getSeriesList() {
            return this.httpClient.get(this.path + "/series/read.php");
          }
        }, {
          key: "getPerson",
          value: function getPerson(PersonID) {
            return this.httpClient.get(this.path + "/person/single-read.php?PersonID=" + PersonID);
          }
        }, {
          key: "getPersonList",
          value: function getPersonList() {
            return this.httpClient.get(this.path + "/person/read.php");
          }
        }, {
          key: "getGenre",
          value: function getGenre(GenreID) {
            return this.httpClient.get(this.path + "/genre/single-read.php?GenreID=" + GenreID);
          }
        }, {
          key: "getAllGenreList",
          value: function getAllGenreList() {
            return this.httpClient.get(this.path + "/genre/read.php");
          }
        }, {
          key: "getGenreList",
          value: function getGenreList(type) {
            return this.httpClient.get(this.path + "/genre/read.php?type=" + type);
          }
        }, {
          key: "getWebsite",
          value: function getWebsite(id) {
            return this.httpClient.get(this.path + "/website/single-read.php?WebsiteID=" + id);
          }
        }, {
          key: "getWebsitesForObject",
          value: function getWebsitesForObject(id, type) {
            return this.httpClient.get(this.path + "/website/read.php?id=" + id + "&type=" + type);
          } // creates

        }, {
          key: "createItem",
          value: function createItem(item) {
            var _this3 = this;

            item.CreatorUserID = this.UserID;
            console.log("createItem: ", item);
            var headers = new Headers();
            headers.append("Accept", 'application/json');
            headers.append('Content-Type', 'application/json');
            this.httpClient.post(this.path + "/item/create.php", item, {
              observe: 'response'
            }).subscribe(function (data) {
              console.log("data body: ", data['body']['ItemID']);
              /*this.navCtrl.navigateForward("/create-item-next/"+
              this.getItemTypeURL(item.ItemType)+"/"+data['body']['ItemID']);*/

              _this3.navCtrl.navigateForward("/item/" + _this3.getItemTypeURL(item.ItemType) + "/" + data['body']['ItemID']);
            }, function (error) {
              console.log(error);
            });
            /*return this.httpClient.post<any>(this.path, item, httpOptions).pipe(
              tap((prod: any) => console.log(`Added item ID=${prod.ItemID}`)),
              catchError(this.handleError<any>('/create-item'))
            );*/
          }
          /*createSeries(series: any): Observable<any> {
            return this.httpClient.post<any>(this.path + "/series/create.php", series, httpOptions).pipe(
              tap((prod: any) => console.log(`Added Series ID=${prod}`)),
              catchError(this.handleError<any>('/create-series'))
            );
          }*/

        }, {
          key: "createEdition",
          value: function createEdition(type, item, edition) {
            edition.CreatorUserID = this.UserID;
            edition.ItemID = item;
            edition.ItemType = type;
            console.log("createEdition: ", edition);
            var headers = new Headers();
            headers.append("Accept", 'application/json');
            headers.append('Content-Type', 'application/json');
            return this.httpClient.post(this.path + "/" + this.getItemTypeURL(type) + "/create.php", edition, {
              observe: 'response'
            });
          }
        }, {
          key: "createSeries",
          value: function createSeries(series) {
            var headers = new Headers();
            headers.append("Accept", 'application/json');
            headers.append('Content-Type', 'application/json');
            series.CreatorUserID = this.UserID;
            console.log("createItem: ", series);
            return this.httpClient.post(this.path + "/series/create.php", series, {
              observe: 'response'
            });
          }
        }, {
          key: "createCollection",
          value: function createCollection(col) {
            var headers = new Headers();
            headers.append("Accept", 'application/json');
            headers.append('Content-Type', 'application/json');
            col.UserID = this.UserID;
            console.log("createItem: ", col);
            return this.httpClient.post(this.path + "/collection/create.php", col, {
              observe: 'response'
            });
          }
        }, {
          key: "createPerson",
          value: function createPerson(p) {
            var headers = new Headers();
            headers.append("Accept", 'application/json');
            headers.append('Content-Type', 'application/json');
            p.CreatorUserID = this.UserID;
            console.log("createPerson: ", p);

            if (p.Names != null) {
              this.httpClient.post(this.path + "/person/create.php", p, {
                observe: 'response'
              }).subscribe(function (data) {
                console.log("data body: ", data['body']['PersonID']);
                return data['body']['PersonID'];
              }, function (error) {
                console.log(error);
              });
            }
          }
        }, {
          key: "createPersonWithItem",
          value: function createPersonWithItem(p, item) {
            var _this4 = this;

            console.log("createPerson: ", p['Names'], " ", p['LastNames']);
            var person = {
              'Names': p['Names'],
              'LastNames': p['LastNames'],
              'CreatorUserID': this.UserID
            };
            var headers = new Headers();
            headers.append("Accept", 'application/json');
            headers.append('Content-Type', 'application/json');
            this.httpClient.post(this.path + "/person/create.php", person, {
              observe: 'response'
            }).subscribe(function (data) {
              console.log("data body: ", data['body']['PersonID']);
              p['PersonID'] = data['body']['PersonID'];

              _this4.addPersonToItem(p, item);
            }, function (error) {
              console.log(error);
            });
          }
        }, {
          key: "createWebsite",
          value: function createWebsite(web, id, type) {
            var headers = new Headers();
            headers.append("Accept", 'application/json');
            headers.append('Content-Type', 'application/json');
            web.EntityID = id;
            web.EntityType = type;
            web.CreatorUserID = this.getUserID();
            console.log("createWebsite: ", web);
            return this.httpClient.post(this.path + "/website/create.php", web, {
              observe: 'response'
            });
          }
        }, {
          key: "addPersonToItem",
          value: function addPersonToItem(p, item) {
            console.log("addPerson: ", p['PersonID'], " ", item, " ", p['Role']);
            var person = {
              'PersonID': p['PersonID'],
              'ItemID': item,
              'Role': p['Role']
            };
            var headers = new Headers();
            headers.append("Accept", 'application/json');
            headers.append('Content-Type', 'application/json');
            return this.httpClient.post(this.path + "/person/add-to-item.php", person, {
              observe: 'response'
            });
          }
        }, {
          key: "addEditionToUser",
          value: function addEditionToUser(id, type, owned) {
            if (this.isEditionOwned(id)) {
              console.log("El usuario ya tiene la edición ", id);
              return 1;
            }

            var e = {
              'UserID': this.UserID,
              'EditionID': id,
              'IsOwned': owned
            };
            console.log("e: ", e);
            var headers = new Headers();
            headers.append("Accept", 'application/json');
            headers.append('Content-Type', 'application/json');
            this.httpClient.post(this.path + "/edition/add-to-user.php", e, {
              observe: 'response'
            }).subscribe(function (data) {
              console.log("Added ", e['EditionID'], " to user");
              return data;
            }, function (error) {
              console.log(error);
              return error;
            });
          }
        }, {
          key: "addEditionToCollection",
          value: function addEditionToCollection(id, edition) {
            edition["CollectionID"] = id;
            console.log("add edition ", edition);
            var headers = new Headers();
            headers.append("Accept", 'application/json');
            headers.append('Content-Type', 'application/json');
            this.httpClient.post(this.path + "/edition/add-to-collection.php", edition, {
              observe: 'response'
            }).subscribe(function (data) {
              console.log("Added ", edition['EditionID'], " to collection ", edition['CollectionID']);
              return data;
            }, function (error) {
              console.log(error);
              return error;
            });
          }
        }, {
          key: "updateCollection",
          value: function updateCollection(col, id) {
            col.UserID = this.UserID;
            col.CollectionID = id;
            console.log("col: ", col);
            var headers = new Headers();
            headers.append("Accept", 'application/json');
            headers.append('Content-Type', 'application/json');
            return this.httpClient.post(this.path + "/collection/update.php", col, {
              observe: 'response'
            });
          }
        }, {
          key: "updateItem",
          value: function updateItem(item, id) {
            item.CreatorUserID = this.UserID;
            item.ItemID = id;
            console.log("item: ", item);
            var headers = new Headers();
            headers.append("Accept", 'application/json');
            headers.append('Content-Type', 'application/json');
            this.httpClient.post(this.path + "/item/update.php", item, {
              observe: 'response'
            }).subscribe(function (data) {
              console.log("Updated ", item['ItemID']);
              return data;
            }, function (error) {
              console.log(error);
              return error;
            });
          }
        }, {
          key: "updateEdition",
          value: function updateEdition(ed, id, type) {
            ed.EditionID = id;
            console.log("edition: ", ed);
            var headers = new Headers();
            headers.append("Accept", 'application/json');
            headers.append('Content-Type', 'application/json');
            this.httpClient.post(this.path + "/" + type + "/update.php", ed, {
              observe: 'response'
            }).subscribe(function (data) {
              console.log("Updated ", ed['EditionID']);
              return data;
            }, function (error) {
              console.log(error);
              return error;
            });
          }
        }, {
          key: "updateSeries",
          value: function updateSeries(series, id) {
            /*series.SeriesID = id;*/
            console.log("series: ", series);
            var headers = new Headers();
            headers.append("Accept", 'application/json');
            headers.append('Content-Type', 'application/json');
            this.httpClient.post(this.path + "/series/update.php", series, {
              observe: 'response'
            }).subscribe(function (data) {
              console.log("Updated ", series['SeriesID']);
              return data;
            }, function (error) {
              console.log(error);
              return error;
            });
          }
        }, {
          key: "updatePerson",
          value: function updatePerson(person, id) {
            console.log("person: ", person);
            var headers = new Headers();
            headers.append("Accept", 'application/json');
            headers.append('Content-Type', 'application/json');
            this.httpClient.post(this.path + "/person/update.php", person, {
              observe: 'response'
            }).subscribe(function (data) {
              console.log("Updated ", person['PersonID']);
              return data;
            }, function (error) {
              console.log(error);
              return error;
            });
          }
        }, {
          key: "updateWebsite",
          value: function updateWebsite(web) {
            console.log("website: ", web);
            var headers = new Headers();
            headers.append("Accept", 'application/json');
            headers.append('Content-Type', 'application/json');
            return this.httpClient.post(this.path + "/website/update.php", web, {
              observe: 'response'
            });
          }
        }, {
          key: "updateUser",
          value: function updateUser(uid, email, name) {
            var _this5 = this;

            var person = {
              'UserID': this.UserID,
              'Nickname': name,
              'FirebaseID': uid,
              'Email': email
            };
            console.log("user: ", person);
            var headers = new Headers();
            headers.append("Accept", 'application/json');
            headers.append('Content-Type', 'application/json');
            this.httpClient.post(this.path + "/user/update.php", person, {
              observe: 'response'
            }).subscribe(function (data) {
              console.log("Updated ", person['UserID']);

              _this5.presentToast("Actualizado el apodo");

              localStorage.setItem('Nickname', JSON.stringify(name));
              return data;
            }, function (error) {
              console.log(error);
              return error;
            });
          }
        }, {
          key: "deleteCollection",
          value: function deleteCollection(id) {
            var c = {
              'CollectionID': id
            };
            var headers = new Headers();
            headers.append("Accept", 'application/json');
            headers.append('Content-Type', 'application/json');
            return this.httpClient.post(this.path + "/collection/delete.php", c, {
              observe: 'response'
            });
          }
        }, {
          key: "deleteEdition",
          value: function deleteEdition(id, type) {
            var c = {
              'EditionID': id
            };
            var headers = new Headers();
            headers.append("Accept", 'application/json');
            headers.append('Content-Type', 'application/json');
            return this.httpClient.post(this.path + "/" + type + "/delete.php", c, {
              observe: 'response'
            });
          }
        }, {
          key: "deleteItem",
          value: function deleteItem(id, type) {
            var _this6 = this;

            var c = {
              'ItemID': id,
              "ItemTypeName": type
            };
            var headers = new Headers();
            headers.append("Accept", 'application/json');
            headers.append('Content-Type', 'application/json');
            this.httpClient.post(this.path + "/item/delete.php", c, {
              observe: 'response'
            }).subscribe(function (data) {
              console.log(data);

              if (data['body']['otros'] != 0) {
                _this6.presentToast(data['body']['message']);
              } else {
                _this6.navCtrl.navigateForward("/myitems");
              }
            }, function (error) {
              console.log(error);
              return error;
            });
          }
        }, {
          key: "deleteSeries",
          value: function deleteSeries(id) {
            var c = {
              'SeriesID': id
            };
            var headers = new Headers();
            headers.append("Accept", 'application/json');
            headers.append('Content-Type', 'application/json');
            this.httpClient.post(this.path + "/series/delete.php", c, {
              observe: 'response'
            }).subscribe(function (data) {
              console.log(data);
              console.log("Deleted ", c['SeriesID']);
              return data;
            }, function (error) {
              console.log(error);
              return error;
            });
          }
        }, {
          key: "deletePerson",
          value: function deletePerson(id) {
            var c = {
              'PersonID': id
            };
            var headers = new Headers();
            headers.append("Accept", 'application/json');
            headers.append('Content-Type', 'application/json');
            this.httpClient.post(this.path + "/person/delete.php", c, {
              observe: 'response'
            }).subscribe(function (data) {
              console.log(data);
              console.log("Deleted ", c['PersonID']);
              return data;
            }, function (error) {
              console.log(error);
              return error;
            });
          }
        }, {
          key: "deleteWebsite",
          value: function deleteWebsite(id) {
            var c = {
              'WebsiteID': id
            };
            var headers = new Headers();
            headers.append("Accept", 'application/json');
            headers.append('Content-Type', 'application/json');
            this.httpClient.post(this.path + "/website/delete.php", c, {
              observe: 'response'
            }).subscribe(function (data) {
              console.log(data);
              console.log("Deleted ", c['WebsiteID']);
              return data;
            }, function (error) {
              console.log(error);
              return error;
            });
          }
        }, {
          key: "removeEditionFromCollection",
          value: function removeEditionFromCollection(CollectionID, ItemID, EditionID) {
            var c = {
              'CollectionID': CollectionID,
              'ItemID': ItemID,
              'EditionID': EditionID
            };
            var headers = new Headers();
            headers.append("Accept", 'application/json');
            headers.append('Content-Type', 'application/json');
            return this.httpClient.post(this.path + "/edition/remove-from-collection.php", c, {
              observe: 'response'
            });
          }
        }, {
          key: "removePersonToItem",
          value: function removePersonToItem(person, item, role) {
            var p = {
              'PersonID': person,
              'ItemID': item,
              'Role': role
            };
            console.log("p: ", p);
            var headers = new Headers();
            headers.append("Accept", 'application/json');
            headers.append('Content-Type', 'application/json');
            return this.httpClient.post(this.path + "/person/remove-from-item.php", p, {
              observe: 'response'
            });
          }
        }, {
          key: "removeEditionFromUser",
          value: function removeEditionFromUser(editionID) {
            var c = {
              'UserID': this.getUserID(),
              'EditionID': editionID
            };
            var headers = new Headers();
            headers.append("Accept", 'application/json');
            headers.append('Content-Type', 'application/json');
            return this.httpClient.post(this.path + "/edition/remove-from-user.php", c, {
              observe: 'response'
            });
          }
        }, {
          key: "updateEditionToUser",
          value: function updateEditionToUser(edition, owned) {
            var c = {
              'UserID': this.getUserID(),
              'EditionID': edition,
              'IsOwned': owned
            };
            var headers = new Headers();
            headers.append("Accept", 'application/json');
            headers.append('Content-Type', 'application/json');
            return this.httpClient.post(this.path + "/edition/update-to-user.php", c, {
              observe: 'response'
            });
          }
        }, {
          key: "searchEditions",
          value: function searchEditions(params) {
            var headers = new Headers();
            headers.append("Accept", 'application/json');
            headers.append('Content-Type', 'application/json');
            return this.httpClient.post(this.path + "/edition/search.php", params, {
              observe: 'response'
            });
          }
        }]);

        return ApiRestService;
      }();

      ApiRestService.ctorParameters = function () {
        return [{
          type: _angular_common_http__WEBPACK_IMPORTED_MODULE_3__["HttpClient"]
        }, {
          type: _ionic_angular__WEBPACK_IMPORTED_MODULE_2__["NavController"]
        }, {
          type: _ionic_angular__WEBPACK_IMPORTED_MODULE_2__["ToastController"]
        }];
      };

      ApiRestService = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
        providedIn: 'root'
      })], ApiRestService);
      /***/
    },

    /***/
    "./src/app/collections/collections-routing.module.ts":
    /*!***********************************************************!*\
      !*** ./src/app/collections/collections-routing.module.ts ***!
      \***********************************************************/

    /*! exports provided: CollectionsPageRoutingModule */

    /***/
    function srcAppCollectionsCollectionsRoutingModuleTs(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CollectionsPageRoutingModule", function () {
        return CollectionsPageRoutingModule;
      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! tslib */
      "./node_modules/tslib/tslib.es6.js");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/core */
      "./node_modules/@angular/core/__ivy_ngcc__/fesm2015/core.js");
      /* harmony import */


      var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/router */
      "./node_modules/@angular/router/__ivy_ngcc__/fesm2015/router.js");
      /* harmony import */


      var _collections_page__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ./collections.page */
      "./src/app/collections/collections.page.ts");

      var routes = [{
        path: '',
        component: _collections_page__WEBPACK_IMPORTED_MODULE_3__["CollectionsPage"]
      }];

      var CollectionsPageRoutingModule = function CollectionsPageRoutingModule() {
        _classCallCheck(this, CollectionsPageRoutingModule);
      };

      CollectionsPageRoutingModule = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        imports: [_angular_router__WEBPACK_IMPORTED_MODULE_2__["RouterModule"].forChild(routes)],
        exports: [_angular_router__WEBPACK_IMPORTED_MODULE_2__["RouterModule"]]
      })], CollectionsPageRoutingModule);
      /***/
    },

    /***/
    "./src/app/collections/collections.module.ts":
    /*!***************************************************!*\
      !*** ./src/app/collections/collections.module.ts ***!
      \***************************************************/

    /*! exports provided: CollectionsPageModule */

    /***/
    function srcAppCollectionsCollectionsModuleTs(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CollectionsPageModule", function () {
        return CollectionsPageModule;
      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! tslib */
      "./node_modules/tslib/tslib.es6.js");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/core */
      "./node_modules/@angular/core/__ivy_ngcc__/fesm2015/core.js");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/common */
      "./node_modules/@angular/common/__ivy_ngcc__/fesm2015/common.js");
      /* harmony import */


      var _angular_forms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/forms */
      "./node_modules/@angular/forms/__ivy_ngcc__/fesm2015/forms.js");
      /* harmony import */


      var _ionic_angular__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @ionic/angular */
      "./node_modules/@ionic/angular/__ivy_ngcc__/fesm2015/ionic-angular.js");
      /* harmony import */


      var _collections_routing_module__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! ./collections-routing.module */
      "./src/app/collections/collections-routing.module.ts");
      /* harmony import */


      var _collections_page__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! ./collections.page */
      "./src/app/collections/collections.page.ts");
      /*import { CreateCollectionPageModule } from '../create-collection/create-collection.module';
      import { ComponentsModule } from '../components/components.module';*/


      var CollectionsPageModule = function CollectionsPageModule() {
        _classCallCheck(this, CollectionsPageModule);
      };

      CollectionsPageModule = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        imports: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormsModule"], _ionic_angular__WEBPACK_IMPORTED_MODULE_4__["IonicModule"], //ComponentsModule,
        _collections_routing_module__WEBPACK_IMPORTED_MODULE_5__["CollectionsPageRoutingModule"]],
        declarations: [_collections_page__WEBPACK_IMPORTED_MODULE_6__["CollectionsPage"]]
      })], CollectionsPageModule);
      /***/
    },

    /***/
    "./src/app/collections/collections.page.scss":
    /*!***************************************************!*\
      !*** ./src/app/collections/collections.page.scss ***!
      \***************************************************/

    /*! exports provided: default */

    /***/
    function srcAppCollectionsCollectionsPageScss(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony default export */


      __webpack_exports__["default"] = "\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbGxlY3Rpb25zL2NvbGxlY3Rpb25zLnBhZ2Uuc2NzcyJ9 */";
      /***/
    },

    /***/
    "./src/app/collections/collections.page.ts":
    /*!*************************************************!*\
      !*** ./src/app/collections/collections.page.ts ***!
      \*************************************************/

    /*! exports provided: CollectionsPage */

    /***/
    function srcAppCollectionsCollectionsPageTs(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CollectionsPage", function () {
        return CollectionsPage;
      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! tslib */
      "./node_modules/tslib/tslib.es6.js");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/core */
      "./node_modules/@angular/core/__ivy_ngcc__/fesm2015/core.js");
      /* harmony import */


      var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/router */
      "./node_modules/@angular/router/__ivy_ngcc__/fesm2015/router.js");
      /* harmony import */


      var _ionic_angular__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @ionic/angular */
      "./node_modules/@ionic/angular/__ivy_ngcc__/fesm2015/ionic-angular.js");
      /* harmony import */


      var _api_rest_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! ../api-rest.service */
      "./src/app/api-rest.service.ts"); //import { CreateCollectionPage } from '../create-collection/create-collection.page';


      var CollectionsPage = /*#__PURE__*/function () {
        function CollectionsPage(http, navCtrl, modalController, route, router, alertController) {
          _classCallCheck(this, CollectionsPage);

          this.http = http;
          this.navCtrl = navCtrl;
          this.modalController = modalController;
          this.route = route;
          this.router = router;
          this.alertController = alertController;
          this.getCollections();
        }

        _createClass(CollectionsPage, [{
          key: "getCollections",
          value: function getCollections() {
            var _this7 = this;

            this.colecciones = [];
            this.http.getCollections().subscribe(function (res) {
              _this7.colecciones = res['body'];
              console.log("colecciones: ", _this7.colecciones);
            }, function (error) {
              console.error(error);
            });
            console.log(this.colecciones);
          }
        }, {
          key: "goToCollection",
          value: function goToCollection(id) {
            console.log('id ', id);
            this.navCtrl.navigateForward("/collection/" + id);
          }
        }, {
          key: "goToWishlist",
          value: function goToWishlist() {
            this.navCtrl.navigateForward("/wishlist");
          }
        }, {
          key: "ngOnInit",
          value: function ngOnInit() {}
        }, {
          key: "goToNewCollection",
          value: function goToNewCollection() {
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
              return regeneratorRuntime.wrap(function _callee2$(_context2) {
                while (1) {
                  switch (_context2.prev = _context2.next) {
                    case 0:
                      console.log("Página modal");
                      /*const modal = await this.modalController.create({
                        component: CreateCollectionPage
                      });
                                modal.onDidDismiss().then((dataReturned) => {
                        if (dataReturned != null) {
                          this.colecciones = [];
                          this.newCol = dataReturned;
                          console.log("New Collection: ",this.newCol);
                          this.getCollections();
                        }
                      });
                                return await modal.present();*/

                    case 1:
                    case "end":
                      return _context2.stop();
                  }
                }
              }, _callee2);
            }));
          }
        }, {
          key: "deleteCollection",
          value: function deleteCollection(id) {
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
              var _this8 = this;

              var alert;
              return regeneratorRuntime.wrap(function _callee3$(_context3) {
                while (1) {
                  switch (_context3.prev = _context3.next) {
                    case 0:
                      _context3.next = 2;
                      return this.alertController.create({
                        header: 'Confirmar',
                        message: '¿Estás seguro que deseas eliminar la colección?',
                        buttons: [{
                          text: 'Cancelar',
                          role: 'cancelar',
                          cssClass: 'secondary',
                          handler: function handler() {
                            console.log('Confirm Cancel');
                          }
                        }, {
                          text: 'Aceptar',
                          handler: function handler() {
                            console.log('Confirm Okay');

                            _this8.http.deleteCollection(id).subscribe(function (data) {
                              _this8.http.presentToast(data['body']['Message']);

                              if (data.status == 200) {
                                _this8.getCollections();
                              }
                            }, function (error) {
                              console.log(error);
                              return error;
                            });
                          }
                        }]
                      });

                    case 2:
                      alert = _context3.sent;
                      _context3.next = 5;
                      return alert.present();

                    case 5:
                    case "end":
                      return _context3.stop();
                  }
                }
              }, _callee3, this);
            }));
          }
        }]);

        return CollectionsPage;
      }();

      CollectionsPage.ctorParameters = function () {
        return [{
          type: _api_rest_service__WEBPACK_IMPORTED_MODULE_4__["ApiRestService"]
        }, {
          type: _ionic_angular__WEBPACK_IMPORTED_MODULE_3__["NavController"]
        }, {
          type: _ionic_angular__WEBPACK_IMPORTED_MODULE_3__["ModalController"]
        }, {
          type: _angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"]
        }, {
          type: _angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"]
        }, {
          type: _ionic_angular__WEBPACK_IMPORTED_MODULE_3__["AlertController"]
        }];
      };

      CollectionsPage = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-collections',
        template: Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"])(__webpack_require__(
        /*! raw-loader!./collections.page.html */
        "./node_modules/raw-loader/dist/cjs.js!./src/app/collections/collections.page.html"))["default"],
        providers: [_api_rest_service__WEBPACK_IMPORTED_MODULE_4__["ApiRestService"]],
        styles: [Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"])(__webpack_require__(
        /*! ./collections.page.scss */
        "./src/app/collections/collections.page.scss"))["default"]]
      })], CollectionsPage);
      /***/
    }
  }]);
})();
//# sourceMappingURL=collections-collections-module-es5.js.map